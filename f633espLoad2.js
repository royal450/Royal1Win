import{initializeApp}from 'https://www.gstatic.com/firebasejs/10.14.1/firebase-app.js';import{getDatabase,ref,set,get,push,onValue,update,query,orderByChild,limitToLast}from 'https://www.gstatic.com/firebasejs/10.14.1/firebase-database.js';import{getAuth,onAuthStateChanged}from 'https://www.gstatic.com/firebasejs/10.14.1/firebase-auth.js';const firebaseConfig={apiKey:"AIzaSyBuioOF7DCq-qIoa1D6ZyZbrAVeGjbfv3Y",authDomain:"daily-campaign-king.firebaseapp.com",databaseURL:"https://daily-campaign-king-default-rtdb.firebaseio.com",projectId:"daily-campaign-king",storageBucket:"daily-campaign-king.appspot.com",messagingSenderId:"1089692268059",appId:"1:1089692268059:web:eddde94901436202576abe",measurementId:"G-6PXV3B5322"};const app=initializeApp(firebaseConfig);const auth=getAuth(app);const db=getDatabase(app);const HANDLING_FEE=1;const NUMBER_WIN_MULTIPLIER=10;const COLOR_WIN_MULTIPLIER=2;const BIGSMALL_WIN_MULTIPLIER=2;const MAX_BET=10000;const CYCLE_DURATION=60*1000;const RESULT_GENERATION_TIME=2;const RESULT_DISPLAY_TIME=0;const SECRET_HOOK=50;let balanceValue=1;let quantity=1;let multiplier=1;let agreed=!0;let currentUser=null;let userBalance=0;let selectedElement=null;let betType='';let currentGamePeriod=2025050645001;let gameResults={};let allBets={};let betStatistics={numbers:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0},colors:{red:0,green:0,violet:0},bigSmall:{big:0,small:0}};let timerInterval=null;let countdownInterval=null;let resultDisplayTimeout=null;let userPlacedBets=!1;let cycleStartTime=null;let resultsProcessed=!1;let resultGenerated=!1;let serverTimeOffset=0;let currentHistoryPage=1;let totalHistoryPages=1;let cachedHistoryData=[];let userHistoryData=[];let currentHistoryTab='game';let historyTabInitialized=!1;const numberColors={0:{colors:['red','violet'],size:'small'},1:{colors:['green'],size:'small'},2:{colors:['red'],size:'small'},3:{colors:['green'],size:'small'},4:{colors:['red'],size:'small'},5:{colors:['green','violet'],size:'big'},6:{colors:['red'],size:'big'},7:{colors:['green'],size:'big'},8:{colors:['red'],size:'big'},9:{colors:['green'],size:'big'}};const lightColors=['#FFD700','#87CEEB','#FFA07A','#98FB98','#FFB6C1','#E0FFFF','#F5DEB3','#DDA0DD','#B0E0E6','#FAFAD2','#EEE8AA','#FFDEAD'];function formatIndianNumber(num){return new Intl.NumberFormat('en-IN').format(num)}function initializeToast(){try{if(document.querySelector('#toast-styles')){return}const toastStyles=document.createElement('style');toastStyles.id='toast-styles';toastStyles.textContent=`.advanced-toast {position: fixed;top: 20px;right: 20px;padding: 15px 20px;border-radius: 8px; color: white; display: flex;align-items: center; box-shadow: 0 4px 12px rgba(0,0,0,0.15);transform: translateX(150%);transition: transform 0.3s ease-out; z-index: 1000; overflow: hidden;}.advanced-toast.show { transform: translateX(0);}.advanced-toast.success {  background: linear-gradient(135deg, #4CAF50, #2E7D32);}.advanced-toast.error {background: linear-gradient(135deg, #F44336, #C62828);}.toast-icon {    font-size: 20px;margin-right: 10px;}.toast-message {font-size: 14px;}.toast-progress {position: absolute; bottom: 0;left: 0; height: 4px; width: 100%;background: rgba(255,255,255,0.3);}.toast-progress::after { content: '';position: absolute;bottom: 0;left: 0;height: 100%;width: 100%; background: white;animation: progress 3s linear forwards; }@keyframes progress {0% { width: 100%; }100% { width: 0%; }}.body_overlay { position: fixed; top: 0;   left: 0; width: 100%; height: 100%;background-color: rgba(0,0,0,0.5); z-index: 90; display: none;}.body_overlay.active {display: block; }.OverlayLayouts, .OverlayLayouts_LOSE { animation: fadeIn 0.3s ease-out;}@keyframes fadeIn {from { opacity: 0; transform: scale(0.9); }to { opacity: 1; transform: scale(1); }}.ResultsValue { animation: pulse 1s infinite alternate;} @keyframes pulse {from { transform: scale(1); } to { transform: scale(1.05); }}.user-history-container {max-height: 400px;overflow-y: auto;padding: 10px;  border-radius: 8px;background-color: #f9f9f9; box-shadow: inset 0 0 5px rgba(0,0,0,0.1); margin-top: 10px; } .user-history-row {padding: 15px; margin: 10px 0; border-radius: 10px;display: flex; justify-content: space-between; align-items: center;box-shadow: 0 3px 10px rgba(0,0,0,0.1); transition: all 0.3s ease;position: relative; overflow: hidden;background: white;border: 1px solid rgba(0,0,0,0.05); }.user-history-row:hover {transform: translateY(-3px); box-shadow: 0 6px 15px rgba(0,0,0,0.15);}.user-history-row::before {content: ''; position: absolute;top: 0; left: 0;width: 5px;height: 100%;}.user-history-win {background: linear-gradient(to right, rgba(39, 174, 96, 0.05), white 15%);}.user-history-win::before {background: linear-gradient(to bottom, #27ae60, #2ecc71);}.user-history-lose { background: linear-gradient(to right, rgba(231, 76, 60, 0.05), white 15%);} .user-history-lose::before { background: linear-gradient(to bottom, #e74c3c, #f05a5a);}.user-history-period {font-weight: bold;font-size: 14px;color: #333;text-shadow: 0 1px 0 rgba(255,255,255,0.5);background: rgba(0,0,0,0.05);padding: 5px 10px;border-radius: 20px;}.user-history-details {display: flex; flex-direction: column; align-items: flex-start;gap: 8px;}.user-history-bet-type {font-size: 12px;color: #666;background: rgba(0,0,0,0.03); padding: 2px 8px; border-radius: 12px;} .user-history-result {display: flex;gap: 15px; align-items: center;}.user-history-value {display: inline-block;padding: 5px 10px;  border-radius: 6px; font-weight: bold;font-size: 14px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);}.user-history-win .user-history-value {  background: linear-gradient(135deg, #27ae60, #2ecc71);color: white;}.user-history-lose .user-history-value { background: linear-gradient(135deg, #e74c3c, #f05a5a); color: white; } .user-history-amount {font-weight: bold;font-size: 18px;text-shadow: 0 1px 0 rgba(0,0,0,0.1);padding: 5px 10px;border-radius: 5px;}.user-history-win .user-history-amount {color: #27ae60; background-color: rgba(39, 174, 96, 0.1);}.user-history-lose .user-history-amount { color: #e74c3c;background-color: rgba(231, 76, 60, 0.1);}.gh-tab {transition: all 0.3s ease;cursor: pointer;padding: 10px 15px;border-radius: 5px;}.gh-tab:hover {  background-color: rgba(0,0,0,0.05);}.gh-tab.active { color: #fff;  background: linear-gradient(135deg, #4CAF50, #2E7D32); border-radius: 5px;box-shadow: 0 2px 5px rgba(0,0,0,0.2);}.empty-history-message {text-align: center;padding: 30px 15px; color: #999;font-style: italic;background-color: rgba(0,0,0,0.02);  border-radius: 8px; margin: 20px 0;border: 1px dashed #ddd;} .latest-result-badge { position: absolute;top: -8px;right: -8px;background: linear-gradient(135deg, #FF5722, #FF9800);color: white;font-size: 10px;  padding: 3px 8px;border-radius: 10px;box-shadow: 0 2px 5px rgba(0,0,0,0.2);animation: pulse 1.2s infinite alternate;} `;document.head.appendChild(toastStyles);if(!document.querySelector('.body_overlay')){const overlay=document.createElement('div');overlay.className='body_overlay';document.body.appendChild(overlay)}}catch(error){console.error("Error initializing toast:",error)}}function showToast(message,isSuccess=!0){try{if(document.readyState==='loading'){return}const existingToast=document.querySelector('.advanced-toast');if(existingToast)existingToast.remove();const toast=document.createElement('div');toast.className=`advanced-toast ${isSuccess ? 'success' : 'error'}`;toast.innerHTML=`<div class="toast-icon">${isSuccess ? '✓' : '✗'}</div><div class="toast-message">${message}</div><div class="toast-progress"></div> `;document.body.appendChild(toast);setTimeout(()=>toast.classList.add('show'),10);setTimeout(()=>{toast.classList.remove('show');setTimeout(()=>toast.remove(),300)},3000)}catch(error){console.error("Error showing toast:",error)}}function initializeGame(){try{if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',initializeGameAfterDOM);return}initializeGameAfterDOM()}catch(error){console.error("Error initializing game:",error)}}function initializeGameAfterDOM(){try{initializeToast();syncServerTime();syncGlobalTimer();setupGlobalPeriodListener();getOrCreateGamePeriod(!1).then(period=>{currentGamePeriod=period;updateGameIdDisplay();setupGameResultListener();setupBetsListener();checkCurrentResults();updateGameHistoryDisplay()});onAuthStateChanged(auth,handleAuthStateChange);initializeMultiplier();setupEventListeners();startSyncedTimer();setupHistoryTabs();setupHistoryPagination();createUserHistoryContainer();window.setupBetOnElement=setupBetOnElement;window.setOnBetElement=setOnBetElement;window.placeBet=placeBet;window.generateGameResult=generateGameResult;window.start_overlay=start_overlay;window.refreshBalance=refreshBalance;window.showWinLossResult=showWinLossResult;window.nextHistoryPage=nextHistoryPage;window.prevHistoryPage=prevHistoryPage;window.switchHistoryTab=switchHistoryTab}catch(error){console.error("Error in initializeGameAfterDOM:",error)}}function createUserHistoryContainer(){try{const historyContainer=document.querySelector('.gh-table');if(!historyContainer)return;const existingContainer=document.querySelector('.user-history-container');if(existingContainer)return;const userHistoryContainer=document.createElement('div');userHistoryContainer.className='user-history-container';userHistoryContainer.id='userHistoryContainer';userHistoryContainer.style.display='none';historyContainer.parentNode.insertBefore(userHistoryContainer,historyContainer.nextSibling)}catch(error){console.error("Error creating user history container:",error)}}function syncServerTime(){try{const timeRef=ref(db,'.info/serverTimeOffset');onValue(timeRef,(snapshot)=>{if(snapshot.exists()){serverTimeOffset=snapshot.val()||0}else{}})}catch(error){console.error("Error syncing server time:",error)}}function getServerTime(){return Date.now()+serverTimeOffset}function syncGlobalTimer(){try{const globalTimerRef=ref(db,'globalGameTimer');onValue(globalTimerRef,(snapshot)=>{if(snapshot.exists()){const data=snapshot.val();cycleStartTime=data.cycleStartTime;updateTimerFromCycleStart()}else{initializeGlobalTimer()}})}catch(error){console.error("Error syncing global timer:",error);initializeGlobalTimer()}}async function initializeGlobalTimer(){try{const now=getServerTime();const globalTimerRef=ref(db,'globalGameTimer');const snapshot=await get(globalTimerRef);if(!snapshot.exists()){cycleStartTime=Math.floor(now/CYCLE_DURATION)*CYCLE_DURATION;await set(globalTimerRef,{cycleStartTime:cycleStartTime,lastUpdate:now})}}catch(error){console.error("Error initializing global timer:",error)}}function startSyncedTimer(){try{if(timerInterval)clearInterval(timerInterval);updateTimerFromCycleStart();timerInterval=setInterval(()=>{updateTimerFromCycleStart()},1000)}catch(error){console.error("Error starting synced timer:",error)}}let preGeneratedResult=null;function SecretResultLOOKUP(){try{const existingResultRef=ref(db,`Realtime_result_count/${currentGamePeriod}`);get(existingResultRef).then(snapshot=>{if(snapshot.exists()){const existingResult=snapshot.val();return}const adminOverrideRef=ref(db,`adminOverride/${currentGamePeriod}`);get(adminOverrideRef).then(adminSnapshot=>{let winningNumber,winningColor,winningBigSmall;if(adminSnapshot.exists()){const adminOverride=adminSnapshot.val();winningNumber=parseInt(adminOverride.number);const colorData=numberColors[winningNumber];winningColor=colorData.colors.length>1?colorData.colors[Math.floor(Math.random()*colorData.colors.length)]:colorData.colors[0];winningBigSmall=colorData.size}else{winningNumber=Math.floor(Math.random()*10);const colorData=numberColors[winningNumber];winningColor=colorData.colors.length>1?colorData.colors[Math.floor(Math.random()*colorData.colors.length)]:colorData.colors[0];winningBigSmall=colorData.size}preGeneratedResult={period:currentGamePeriod,winning_number:winningNumber,winning_color:winningColor,winning_bigSmall:winningBigSmall,timestamp:new Date().toISOString(),source:adminSnapshot.exists()?'admin_override':'random'};window.actualResult={period:currentGamePeriod,number:winningNumber,color:winningColor,bigSmall:winningBigSmall,source:preGeneratedResult.source}}).catch(error=>{console.error("Error checking admin override:",error)})}).catch(error=>{console.error("Error checking existing result:",error)})}catch(error){console.error("Error in early result generation:",error)}}function updateTimerFromCycleStart(){try{const now=getServerTime();const elapsed=(now-cycleStartTime)%CYCLE_DURATION;const remaining=Math.ceil((CYCLE_DURATION-elapsed)/1000);updateTimerDisplay(remaining);if(remaining===SECRET_HOOK){SecretResultLOOKUP()}if(remaining===RESULT_GENERATION_TIME&&!resultGenerated){generateGameResult();resultGenerated=!0}if(remaining===5){startResultCountdown()}if(remaining===RESULT_DISPLAY_TIME&&!resultsProcessed){showResults();resultsProcessed=!0}if(remaining<=0){cycleStartTime=Math.floor(now/CYCLE_DURATION)*CYCLE_DURATION+CYCLE_DURATION;localStorage.setItem('winGoStartTime',cycleStartTime.toString());getOrCreateGamePeriod(!0).then(nextPeriod=>{currentGamePeriod=nextPeriod;updateGameIdDisplay();updateGameHistoryDisplay();resultGenerated=!1;resultsProcessed=!1;userPlacedBets=!1}).catch(error=>{console.error("Error updating period:",error)})}}catch(error){console.error("Error updating timer:",error)}}function updateTimerDisplay(seconds){try{const timeDigits=document.querySelectorAll('.time-boxes .time-digit');if(!timeDigits||timeDigits.length<5){console.warn("Timer digits elements not found or insufficient");return}seconds=Math.max(0,Math.min(60,seconds));const minutes=Math.floor(seconds/60);const remainingSeconds=seconds%60;timeDigits[0].textContent='0';timeDigits[1].textContent=minutes;timeDigits[2].textContent=':';timeDigits[3].textContent=Math.floor(remainingSeconds/10);timeDigits[4].textContent=remainingSeconds%10}catch(error){console.error("Error updating timer display:",error)}}function startResultCountdown(){try{const countdownContainer=document.querySelector('.card_container_main');const countdownDigits=document.querySelectorAll('.card_dice');if(!countdownContainer||countdownDigits.length<2){console.warn("Countdown elements not found");return}let count=5;countdownContainer.style.display='flex';countdownDigits[0].textContent='0';countdownDigits[1].textContent='5';if(countdownInterval)clearInterval(countdownInterval);countdownInterval=setInterval(()=>{count--;if(count>=0){countdownDigits[0].textContent=Math.floor(count/10);countdownDigits[1].textContent=count%10}else{clearInterval(countdownInterval);countdownContainer.style.display='none';getOrCreateGamePeriod(!0).then(period=>{currentGamePeriod=period;updateGameIdDisplay();updateGameHistoryDisplay();resultsProcessed=!1;resultGenerated=!1;userPlacedBets=!1;if(gameResults&&gameResults[currentGamePeriod]){processUserResultsForPeriod(currentGamePeriod,gameResults[currentGamePeriod])}}).catch(error=>{console.error("Error updating period:",error)})}},1000)}catch(error){console.error("Error starting result countdown:",error)}}async function getOrCreateGamePeriod(forceIncrement=!1){try{const globalPeriodRef=ref(db,'globalGameState/currentPeriod');const snapshot=await get(globalPeriodRef);if(snapshot.exists()){const currentPeriod=parseInt(snapshot.val());if(forceIncrement){const nextPeriod=currentPeriod+1;await set(globalPeriodRef,nextPeriod);await updateGlobalTimerCycle();return nextPeriod}else{return currentPeriod}}else{const initialPeriod=currentGamePeriod||2025050645001;await set(globalPeriodRef,initialPeriod);return initialPeriod}}catch(error){console.error("Error getting/creating global game period:",error);if(forceIncrement&&currentGamePeriod){const fallbackPeriod=currentGamePeriod+1;console.warn(`Using fallback incremented period: ${fallbackPeriod}`);return fallbackPeriod}else{console.warn(`Using current period: ${currentGamePeriod}`);return currentGamePeriod||2025050645001}}}async function updateGlobalTimerCycle(){try{const now=getServerTime();const newCycleStartTime=Math.floor(now/CYCLE_DURATION)*CYCLE_DURATION;const globalTimerRef=ref(db,'globalGameTimer');await set(globalTimerRef,{cycleStartTime:newCycleStartTime,lastUpdate:now})}catch(error){console.error("Error updating global timer cycle:",error)}}function setupGlobalPeriodListener(){try{const globalPeriodRef=ref(db,'globalGameState/currentPeriod');onValue(globalPeriodRef,(snapshot)=>{if(snapshot.exists()){const globalPeriod=parseInt(snapshot.val());if(globalPeriod!==currentGamePeriod){currentGamePeriod=globalPeriod;updateGameIdDisplay();resultGenerated=!1;resultsProcessed=!1;userPlacedBets=!1;updateGameHistoryDisplay();setupBetsListener()}}})}catch(error){console.error("Error setting up global period listener:",error)}}function updateGameIdDisplay(){try{const gameIdDisplay=document.querySelector('.game-id');if(gameIdDisplay){gameIdDisplay.textContent=currentGamePeriod}}catch(error){console.error("Error updating game ID:",error)}}function initializeMultiplier(){try{multiplier=1;const multiplierButtons=document.querySelectorAll('.bet-mult-btn');if(multiplierButtons&&multiplierButtons.length>0){multiplierButtons.forEach(btn=>{btn.classList.remove('selected');const value=parseInt(btn.getAttribute('data-value')||'1');if(value===1){btn.classList.add('selected')}})}const wingo30MultiplierButtons=document.querySelectorAll('.multiplier_wingo30');if(wingo30MultiplierButtons&&wingo30MultiplierButtons.length>0){wingo30MultiplierButtons.forEach(btn=>{const value=parseInt(btn.textContent.replace('X',''));if(value===1){btn.classList.add('active');btn.classList.remove('inactive')}else{btn.classList.remove('active');btn.classList.add('inactive')}})}}catch(error){console.error("Error initializing multiplier:",error)}}function start_overlay(show){try{const overlay=document.querySelector('.body_overlay');if(overlay){if(show){overlay.classList.add('active');overlay.style.display='block'}else{overlay.classList.remove('active');overlay.style.display='none'}}}catch(error){console.error("Error toggling overlay:",error)}}function applyRandomLightBackground(){try{const header=document.getElementById('betHeader');const confirmBtn=document.getElementById('betConfirmBtn');const arrow=document.getElementById('betArrow');if(!header||!confirmBtn||!arrow)return;const randomColor=lightColors[Math.floor(Math.random()*lightColors.length)];[header,confirmBtn].forEach(el=>{el.style.backgroundColor=randomColor;el.style.backgroundImage='none'});arrow.style.borderTopColor=randomColor;const rgb=parseInt(randomColor.substring(1),16);const r=(rgb>>16)&0xff;const g=(rgb>>8)&0xff;const b=(rgb>>0)&0xff;const brightness=(r*299+g*587+b*114)/1000;const textColor=brightness>125?'#000':'#fff';[header,confirmBtn].forEach(el=>{el.style.color=textColor})}catch(error){console.error("Error applying random background:",error)}}function applyElementBackground(element){try{if(!(element instanceof Element))return;const header=document.getElementById('betHeader');const confirmBtn=document.getElementById('betConfirmBtn');const arrow=document.getElementById('betArrow');const selectionPreview=document.getElementById('betSelectionPreview');if(!header||!confirmBtn||!arrow)return;let bgColor='';if(selectionPreview){selectionPreview.textContent=element.textContent.trim()}if(element.classList.contains('red_wingo30')||element.classList.contains('color-option_wingo30')&&element.style.background.includes('f87171')){bgColor='#FF4444'}else if(element.classList.contains('green_wingo30')||element.classList.contains('color-option_wingo30')&&element.style.background.includes('22c55e')){bgColor='#01C136'}else if(element.classList.contains('violet_wingo30')||element.classList.contains('color-option_wingo30')&&element.style.background.includes('c084fc')){bgColor='#9C3EBB'}else if(element.classList.contains('ball_wingo30')){bgColor='#3498db'}else if(element.classList.contains('big-option_wingo30')){bgColor='#E67E22'}else if(element.classList.contains('small-option_wingo30')){bgColor='#9B59B6'}else{applyRandomLightBackground();return}[header,confirmBtn].forEach(el=>{el.style.backgroundColor=bgColor;el.style.backgroundImage='none'});arrow.style.borderTopColor=bgColor;[header,confirmBtn].forEach(el=>{el.style.color='#fff'})}catch(error){console.error("Error applying element background:",error)}}function showRandomSelectionAnimation(){try{const mainBtn=document.getElementById('betMainBtn');const selectionPreview=document.getElementById('betSelectionPreview');const selectorContainer=document.getElementById('betSelectorContainer');if(!mainBtn||!selectionPreview||!selectorContainer)return;const numbers=[0,1,2,3,4,5,6,7,8,9];let counter=0;const animationDuration=2000;const interval=100;const animationInterval=setInterval(()=>{const randomIndex=Math.floor(Math.random()*numbers.length);mainBtn.textContent=numbers[randomIndex];selectionPreview.textContent=numbers[randomIndex];counter+=interval;if(counter>=animationDuration){clearInterval(animationInterval);const finalNumber=numbers[Math.floor(Math.random()*numbers.length)];mainBtn.textContent=finalNumber;selectionPreview.textContent=finalNumber;selectionPreview.style.fontSize='5vmin';selectorContainer.classList.add('visible');selectorContainer.style.display='block';start_overlay(!0);updateTotal();applyRandomLightBackground()}},interval)}catch(error){console.error("Error in random selection animation:",error)}}function updateTotal(){try{const confirmBtn=document.getElementById('betConfirmBtn');if(!confirmBtn)return;const total=balanceValue*quantity*multiplier;confirmBtn.textContent=`Place Bet ₹${formatIndianNumber(total.toFixed(2))}`}catch(error){console.error("Error updating total:",error)}}function setupBetOnElement(element){try{if(!element||!(element instanceof Element)){console.warn("setupBetOnElement called with invalid element");return}const mainBtn=document.getElementById('betMainBtn');const selectionPreview=document.getElementById('betSelectionPreview');const selectorContainer=document.getElementById('betSelectorContainer');if(!mainBtn||!selectionPreview||!selectorContainer)return;const isMultiplier=element.classList.contains('multiplier_wingo30');const isRandomBtn=element.classList.contains('random-btn_wingo30');const isColor=element.classList.contains('color-option_wingo30');const isBigSmall=element.classList.contains('big-option_wingo30')||element.classList.contains('small-option_wingo30');if(isMultiplier){const text=element.textContent.trim().toUpperCase();const value=parseInt(text.replace('X',''));if(!isNaN(value)){multiplier=value;document.querySelectorAll('.multiplier_wingo30').forEach(el=>{el.classList.toggle('active',el===element);el.classList.toggle('inactive',el!==element)});updateTotal();showToast(`Multiplier set to ${text}`)}return}if(isRandomBtn){showToast("Selecting random number...");showRandomSelectionAnimation();betType='number';return}const text=(element.textContent||'').trim();if(mainBtn)mainBtn.textContent=text;if(selectionPreview){selectionPreview.textContent=text;selectionPreview.style.fontSize="5vmin"}applyElementBackground(element);selectedElement=element;if(selectorContainer){selectorContainer.classList.add('visible');selectorContainer.style.display='block'}start_overlay(!0);updateTotal();if(element.classList.contains('ball_wingo30')){betType='number'}else if(isColor){betType='color'}else if(isBigSmall){betType='bigSmall'}}catch(error){console.error("Error in setupBetOnElement:",error)}}function setOnBetElement(){try{const numberButtons=document.querySelectorAll('.number-grid .number-item, .ball_wingo30');if(numberButtons&&numberButtons.length>0){numberButtons.forEach(btn=>{btn.addEventListener('click',()=>{setupBetOnElement(btn);betType='number'})})}const colorButtons=document.querySelectorAll('.color-select-grid .color-item, .color-option_wingo30');if(colorButtons&&colorButtons.length>0){colorButtons.forEach(btn=>{btn.addEventListener('click',()=>{setupBetOnElement(btn);betType='color'})})}const bigSmallButtons=document.querySelectorAll('.size-select-grid .size-item, .big-option_wingo30, .small-option_wingo30');if(bigSmallButtons&&bigSmallButtons.length>0){bigSmallButtons.forEach(btn=>{btn.addEventListener('click',()=>{setupBetOnElement(btn);betType='bigSmall'})})}const randomBtn=document.querySelector('.random-btn_wingo30');if(randomBtn){randomBtn.addEventListener('click',()=>{showRandomSelectionAnimation();betType='number'})}const multiplierButtons=document.querySelectorAll('.multiplier_wingo30');if(multiplierButtons&&multiplierButtons.length>0){multiplierButtons.forEach(btn=>{btn.addEventListener('click',()=>{const text=btn.textContent.trim().toUpperCase();const value=parseInt(text.replace('X',''));if(!isNaN(value)){multiplier=value;multiplierButtons.forEach(el=>{el.classList.toggle('active',el===btn);el.classList.toggle('inactive',el!==btn)});updateTotal();showToast(`Multiplier set to ${text}`)}})})}}catch(error){console.error("Error setting bet elements:",error)}}function setupEventListeners(){try{const balanceButtons=document.querySelectorAll('.bet-opt-btn');if(balanceButtons){balanceButtons.forEach(btn=>{btn.addEventListener('click',()=>{balanceButtons.forEach(b=>b.classList.remove('selected'));btn.classList.add('selected');balanceValue=parseFloat(btn.getAttribute('data-value')||'1');updateTotal()})});if(balanceButtons[0]){balanceButtons[0].classList.add('selected');balanceValue=parseFloat(balanceButtons[0].getAttribute('data-value')||'1')}}const minusBtn=document.querySelector('.minus');const plusBtn=document.querySelector('.plus');const quantityDisplay=document.querySelector('.bet-qty-display');if(minusBtn&&plusBtn&&quantityDisplay){minusBtn.addEventListener('click',()=>{if(quantity>1){quantity--;quantityDisplay.textContent=quantity;updateTotal()}});plusBtn.addEventListener('click',()=>{quantity++;quantityDisplay.textContent=quantity;updateTotal()})}const multiplierButtons=document.querySelectorAll('.bet-mult-btn');if(multiplierButtons){multiplierButtons.forEach(btn=>{btn.addEventListener('click',()=>{multiplierButtons.forEach(b=>b.classList.remove('selected'));btn.classList.add('selected');multiplier=parseFloat(btn.getAttribute('data-value')||'1');updateTotal()})})}const agreementCheckbox=document.getElementById('betCheckbox');if(agreementCheckbox){agreementCheckbox.addEventListener('click',()=>{agreed=!agreed;const checkmark=agreementCheckbox.querySelector('.bet-checkmark');if(checkmark){checkmark.style.display=agreed?'block':'none'}});agreed=!0;const checkmark=agreementCheckbox.querySelector('.bet-checkmark');if(checkmark){checkmark.style.display='block'}}const confirmBtn=document.getElementById('betConfirmBtn');if(confirmBtn){confirmBtn.addEventListener('click',placeBet)}const cancelBtn=document.getElementById('betCancelBtn');if(cancelBtn){cancelBtn.addEventListener('click',()=>{const selectorContainer=document.getElementById('betSelectorContainer');if(selectorContainer){selectorContainer.classList.remove('visible')}start_overlay(!1)})}const toggleBtn=document.getElementById('betToggleBtn');if(toggleBtn){toggleBtn.addEventListener('click',()=>{const selectorContainer=document.getElementById('betSelectorContainer');if(selectorContainer){const isVisible=selectorContainer.classList.contains('visible');if(isVisible){selectorContainer.classList.remove('visible');selectorContainer.style.display='none';start_overlay(!1)}else{selectorContainer.classList.add('visible');selectorContainer.style.display='block';start_overlay(!0)}}})}const closeButtons=document.querySelectorAll('.OverlayLayouts .textStylingOnlyClosebtn, .OverlayLayouts_LOSE .textStylingOnlyClosebtn_LOSE');closeButtons.forEach(btn=>{btn.addEventListener('click',()=>{const overlay=btn.closest('.OverlayLayouts')||btn.closest('.OverlayLayouts_LOSE');if(overlay){overlay.style.display='none'}})});setOnBetElement()}catch(error){console.error("Error setting up event listeners:",error)}}function openBetSelector(type,value){try{betType=type;const selectorContainer=document.getElementById('betSelectorContainer');const header=document.getElementById('betHeader');const selectionPreview=document.getElementById('betSelectionPreview');const mainBtn=document.getElementById('betMainBtn');if(!selectorContainer||!header||!selectionPreview||!mainBtn){console.warn("Bet selector elements not found");return}let title='';switch(type){case 'number':title='Number';break;case 'color':title='Color';break;case 'bigSmall':title='Size';break;default:console.warn("Invalid bet type");return}header.textContent=`Select ${title}`;selectionPreview.textContent=value;mainBtn.textContent=value;selectorContainer.classList.add('visible');selectorContainer.style.display='block';start_overlay(!0);updateTotal();applyRandomLightBackground()}catch(error){console.error("Error opening bet selector:",error)}}function handleAuthStateChange(user){try{if(user){currentUser=user;loadUserBalance();checkUserBets();loadUserBettingHistory()}else{currentUser=null;showToast("Please login to place bets",!1)}}catch(error){console.error("Error handling auth state:",error)}}async function checkUserBets(){try{if(!currentUser)return;const userBetsRef=ref(db,`CurrentGameBets/${currentGamePeriod}/${currentUser.uid}`);const snapshot=await get(userBetsRef);if(snapshot.exists()){userPlacedBets=!0}else{userPlacedBets=!1}}catch(error){console.error("Error checking user bets:",error)}}async function loadUserBalance(){try{if(!currentUser)return;const balanceRef=ref(db,`RoyalWinUserDataBase/${currentUser.uid}/balance`);const snapshot=await get(balanceRef);if(snapshot.exists()){userBalance=parseFloat(snapshot.val())||0;updateBalanceDisplay(userBalance)}else{await set(balanceRef,1000);userBalance=1000;updateBalanceDisplay(userBalance)}}catch(error){console.error("Error loading balance:",error);showToast("Error loading balance",!1)}}function updateBalanceDisplay(balance){try{const balanceDisplay=document.getElementById('balanceDisplay');if(balanceDisplay){balanceDisplay.textContent=`₹${formatIndianNumber(balance.toFixed(2))}`}}catch(error){console.error("Error updating balance display:",error)}}async function placeBet(){try{if(!currentUser){showToast("Please login to place bets",!1);return}const total=balanceValue*quantity*multiplier;if(total>userBalance){showToast("Insufficient balance",!1);return}if(total>MAX_BET){showToast(`Maximum bet amount is ₹${formatIndianNumber(MAX_BET)}`,!1);return}if(!agreed){showToast("Please agree to the terms",!1);return}const mainBtn=document.getElementById('betMainBtn');if(!mainBtn){showToast("Selection error",!1);return}const selectedValue=mainBtn.textContent.trim();if(!selectedValue){showToast("Please select a value",!1);return}const now=getServerTime();const elapsed=(now-cycleStartTime)%CYCLE_DURATION;const remaining=Math.ceil((CYCLE_DURATION-elapsed)/1000);if(remaining<=5){showToast("Betting closed for this round",!1);return}const bet={bet_type:betType,user_selected_value:selectedValue,user_total_amount:total,user_multiplier:multiplier,bet_status:'pending',timestamp:new Date().toISOString()};if(betType==='number'){bet.user_selected_numbers=selectedValue}else if(betType==='color'){bet.user_selected_color=selectedValue.toLowerCase()}else if(betType==='bigSmall'){bet.user_selected_bigSmall=selectedValue.toLowerCase()}else{showToast("Invalid bet type",!1);return}const newBetRef=push(ref(db,`CurrentGameBets/${currentGamePeriod}/${currentUser.uid}`));await set(newBetRef,bet);userBalance-=total;await set(ref(db,`RoyalWinUserDataBase/${currentUser.uid}/balance`),userBalance);updateBalanceDisplay(userBalance);const selectorContainer=document.getElementById('betSelectorContainer');if(selectorContainer){selectorContainer.classList.remove('visible');selectorContainer.style.display='none'}start_overlay(!1);userPlacedBets=!0;showToast("Bet placed successfully!",bet.user_total_amount);if(currentHistoryTab==='user'){loadUserBettingHistory()}}catch(error){console.error("Error placing bet:",error);showToast("Error placing bet",!1)}}function setupGameResultListener(){try{const resultsRef=ref(db,'Realtime_result_count');onValue(resultsRef,(snapshot)=>{if(snapshot.exists()){gameResults=snapshot.val()||{};if(gameResults[currentGamePeriod]&&currentUser&&userPlacedBets&&!resultsProcessed){const result=gameResults[currentGamePeriod];processUserResultsForPeriod(currentGamePeriod,result);resultsProcessed=!0}}},(error)=>{console.error("Error setting up game result listener:",error)})}catch(error){console.error("Error setting up game result listener:",error)}}function setupBetsListener(){try{if(!currentGamePeriod){return}const betsRef=ref(db,`CurrentGameBets/${currentGamePeriod}`);onValue(betsRef,(snapshot)=>{if(snapshot.exists()){allBets=snapshot.val()||{};calculateBetStatistics();if(currentUser&&allBets[currentUser.uid]){userPlacedBets=!0}}else{betStatistics={numbers:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0},colors:{red:0,green:0,violet:0},bigSmall:{big:0,small:0}}}},(error)=>{console.error("Error setting up bets listener:",error)})}catch(error){console.error("Error setting up bets listener:",error)}}function calculateBetStatistics(){try{betStatistics={numbers:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0},colors:{red:0,green:0,violet:0},bigSmall:{big:0,small:0}};for(const userId in allBets){const userBets=allBets[userId];for(const betId in userBets){const bet=userBets[betId];if(bet.bet_type==='number'){const number=parseInt(bet.user_selected_numbers);if(!isNaN(number)&&number>=0&&number<=9){betStatistics.numbers[number]+=bet.user_total_amount}}else if(bet.bet_type==='color'){const color=bet.user_selected_color.toLowerCase();if(color in betStatistics.colors){betStatistics.colors[color]+=bet.user_total_amount}}else if(bet.bet_type==='bigSmall'){const type=bet.user_selected_bigSmall.toLowerCase();if(type in betStatistics.bigSmall){betStatistics.bigSmall[type]+=bet.user_total_amount}}}}}catch(error){console.error("Error calculating bet statistics:",error)}}async function checkCurrentResults(){try{if(!currentGamePeriod){return}const resultsRef=ref(db,`Realtime_result_count/${currentGamePeriod}`);const snapshot=await get(resultsRef);if(snapshot.exists()&&currentUser){const userBetsRef=ref(db,`CurrentGameBets/${currentGamePeriod}/${currentUser.uid}`);try{const betsSnapshot=await get(userBetsRef);if(betsSnapshot.exists()){const resultData=snapshot.val();processUserResultsForPeriod(currentGamePeriod,resultData)}}catch(error){console.error("Error checking user bets:",error)}}else{}}catch(error){console.error("Error checking current results:",error)}}async function processUserResultsForPeriod(period,resultData){try{if(!currentUser)return;const userBetsRef=ref(db,`CurrentGameBets/${period}/${currentUser.uid}`);try{const snapshot=await get(userBetsRef);if(!snapshot.exists()){return}const userBets=snapshot.val();const userResults=[];let totalWinnings=0;for(const betId in userBets){const bet=userBets[betId];let isWin=!1;let winAmount=0;if(bet.bet_type==='number'&&parseInt(bet.user_selected_numbers)===resultData.winning_number){isWin=!0;winAmount=bet.user_total_amount*NUMBER_WIN_MULTIPLIER}else if(bet.bet_type==='color'&&bet.user_selected_color.toLowerCase()===resultData.winning_color.toLowerCase()){isWin=!0;winAmount=bet.user_total_amount*COLOR_WIN_MULTIPLIER}else if(bet.bet_type==='bigSmall'&&bet.user_selected_bigSmall.toLowerCase()===resultData.winning_bigSmall.toLowerCase()){isWin=!0;winAmount=bet.user_total_amount*BIGSMALL_WIN_MULTIPLIER}winAmount=Math.round(winAmount*100)/100;await update(ref(db,`CurrentGameBets/${period}/${currentUser.uid}/${betId}`),{bet_status:isWin?'win':'lose',win_amount:winAmount,result_number:resultData.winning_number,result_color:resultData.winning_color,result_bigSmall:resultData.winning_bigSmall});userResults.push({bet_type:bet.bet_type,selected_value:bet.user_selected_value,amount:bet.user_total_amount,win_amount:winAmount,is_win:isWin});totalWinnings+=winAmount}if(totalWinnings>0){refreshBalance()}showWinLossResult(userResults,resultData.winning_number,resultData.winning_color,resultData.winning_bigSmall,period,totalWinnings);if(currentHistoryTab==='user'){loadUserBettingHistory()}}catch(error){console.error("Error processing user results:",error)}}catch(error){console.error("Error processing user results for period:",error)}}async function generateGameResult(){try{const existingResultRef=ref(db,`Realtime_result_count/${currentGamePeriod}`);const snapshot=await get(existingResultRef);if(snapshot.exists()){return}let result;let winningNumber;let winningColor;let winningBigSmall;try{const adminOverrideRef=ref(db,`adminOverride/${currentGamePeriod}`);const adminSnapshot=await get(adminOverrideRef);if(adminSnapshot.exists()){const adminOverride=adminSnapshot.val();winningNumber=parseInt(adminOverride.number);const colorData=numberColors[winningNumber];winningColor=colorData.colors.length>1?colorData.colors[Math.floor(Math.random()*colorData.colors.length)]:colorData.colors[0];winningBigSmall=colorData.size;await set(adminOverrideRef,null)}else{if(preGeneratedResult&&preGeneratedResult.period===currentGamePeriod){winningNumber=preGeneratedResult.winning_number;winningColor=preGeneratedResult.winning_color;winningBigSmall=preGeneratedResult.winning_bigSmall;preGeneratedResult=null}else{winningNumber=Math.floor(Math.random()*10);const colorData=numberColors[winningNumber];winningColor=colorData.colors.length>1?colorData.colors[Math.floor(Math.random()*colorData.colors.length)]:colorData.colors[0];winningBigSmall=colorData.size}}}catch(adminError){console.error("Error checking admin override:",adminError);winningNumber=Math.floor(Math.random()*10);const colorData=numberColors[winningNumber];winningColor=colorData.colors.length>1?colorData.colors[Math.floor(Math.random()*colorData.colors.length)]:colorData.colors[0];winningBigSmall=colorData.size}result={period:currentGamePeriod,winning_number:winningNumber,winning_color:winningColor,winning_bigSmall:winningBigSmall,timestamp:new Date().toISOString(),source:'admin_override'};await set(ref(db,`Realtime_result_count/${currentGamePeriod}`),result);await savePeriodToHistory(currentGamePeriod,result.winning_number,result.winning_color,result.winning_bigSmall);await processBetsForWinners(result.winning_number,result.winning_color,result.winning_bigSmall)}catch(error){console.error("Error generating game result:",error)}}function showResults(){try{const resultRef=ref(db,`Realtime_result_count/${currentGamePeriod}`);get(resultRef).then((snapshot)=>{if(snapshot.exists()){const resultData=snapshot.val();if(currentUser&&userPlacedBets){processUserResultsForPeriod(currentGamePeriod,resultData)}else if(currentUser){showWinLossResult([],resultData.winning_number,resultData.winning_color,resultData.winning_bigSmall,currentGamePeriod,0)}updateGameHistoryDisplay();if(currentUser&&currentHistoryTab==='user'){loadUserBettingHistory()}resultsProcessed=!0}else{generateGameResult().then(()=>{setTimeout(()=>{showResults()},1000)})}}).catch((error)=>{console.error("Error fetching result:",error)})}catch(error){console.error("Error showing results:",error)}}async function processBetsForWinners(winningNumber,winningColor,winningBigSmall){try{const betsRef=ref(db,`CurrentGameBets/${currentGamePeriod}`);const snapshot=await get(betsRef);if(!snapshot.exists()){return}const allBets=snapshot.val();for(const userId in allBets){const userBets=allBets[userId];let userWinnings=0;for(const betId in userBets){const bet=userBets[betId];let isWin=!1;let winAmount=0;if(bet.bet_type==='number'&&parseInt(bet.user_selected_numbers)===winningNumber){isWin=!0;winAmount=bet.user_total_amount*NUMBER_WIN_MULTIPLIER}else if(bet.bet_type==='color'&&bet.user_selected_color.toLowerCase()===winningColor.toLowerCase()){isWin=!0;winAmount=bet.user_total_amount*COLOR_WIN_MULTIPLIER}else if(bet.bet_type==='bigSmall'&&bet.user_selected_bigSmall.toLowerCase()===winningBigSmall.toLowerCase()){isWin=!0;winAmount=bet.user_total_amount*BIGSMALL_WIN_MULTIPLIER}winAmount=Math.round(winAmount*100)/100;await update(ref(db,`CurrentGameBets/${currentGamePeriod}/${userId}/${betId}`),{bet_status:isWin?'win':'lose',win_amount:winAmount,result_number:winningNumber,result_color:winningColor,result_bigSmall:winningBigSmall});userWinnings+=winAmount}if(userWinnings>0){const userRef=ref(db,`RoyalWinUserDataBase/${userId}/balance`);const balanceSnapshot=await get(userRef);if(balanceSnapshot.exists()){const currentBalance=parseFloat(balanceSnapshot.val())||0;const newBalance=currentBalance+userWinnings;await set(userRef,newBalance);if(userId===currentUser?.uid){userBalance=newBalance;updateBalanceDisplay(userBalance)}}}}}catch(error){console.error("Error processing bets for winners:",error)}}async function savePeriodToHistory(period,winningNumber,winningColor,winningBigSmall){try{const countRef=ref(db,'PERIOD_COUNT/count');let currentCount=1;try{const countSnapshot=await get(countRef);if(countSnapshot.exists()){currentCount=parseInt(countSnapshot.val())+1}}catch(error){console.error("Error getting current count:",error)}const now=new Date();const timestamp=`${now.getFullYear()}/${String(now.getMonth()+1).padStart(2,'0')}/${String(now.getDate()).padStart(2,'0')}/${String(now.getHours()).padStart(2,'0')}/${String(now.getMinutes()).padStart(2,'0')}/${String(now.getSeconds()).padStart(2,'0')}`;const periodData={period_count_number:currentCount,period_number:period,win_color:winningColor,win_number:winningNumber,win_bigSmall:winningBigSmall,date:timestamp};try{await set(ref(db,`PERIOD_COUNT/periods/${period}`),periodData);await set(countRef,currentCount);await set(ref(db,`PERIOD_COUNT/history/${period}`),periodData);saveHistoryToLocalStorage(periodData);updateGameHistoryDisplay();return periodData}catch(error){console.error("Error saving period data:",error)}}catch(error){console.error("Error saving period to history:",error);return null}}function saveHistoryToLocalStorage(periodData){try{const historyString=localStorage.getItem('wingo_game_history');let history=[];if(historyString){try{history=JSON.parse(historyString);if(!Array.isArray(history)){history=[]}}catch(e){console.error("Error parsing history from localStorage:",e);history=[]}}history.unshift(periodData);if(history.length>100){history=history.slice(0,100)}localStorage.setItem('wingo_game_history',JSON.stringify(history))}catch(error){console.error("Error saving history to localStorage:",error)}}function showWinLossResult(userResults,winningNumber,winningColor,winningBigSmall,period,totalWinnings=0){try{if(!currentUser||!userPlacedBets){return}if(resultDisplayTimeout){clearTimeout(resultDisplayTimeout)}const hasWin=totalWinnings>0;const resultContainer=hasWin?document.querySelector('.OverlayLayouts'):document.querySelector('.OverlayLayouts_LOSE');if(!resultContainer){console.error("Result container not found");return}const periodElement=hasWin?document.getElementById('Peroid_Number'):document.getElementById('Peroid_Number_LOSE');if(periodElement){periodElement.textContent=`Period 1M Wingo: ${period}`}if(hasWin){const amountElement=document.getElementById('AMOUNT');if(amountElement){amountElement.textContent=`₹${formatIndianNumber(totalWinnings.toFixed(2))}`}}if(hasWin){const colorElement=document.getElementById('Color_value');const numberElement=document.getElementById('Number_Value');const sizeElement=document.getElementById('Size_Value');if(colorElement)colorElement.textContent=capitalizeFirstLetter(winningColor);if(numberElement)numberElement.textContent=winningNumber;if(sizeElement)sizeElement.textContent=capitalizeFirstLetter(winningBigSmall);}else{const colorElement=document.getElementById('Color_value_LOSE');const numberElement=document.getElementById('Number_Value_LOSE');const sizeElement=document.getElementById('Size_Value_LOSE');if(colorElement)colorElement.textContent=capitalizeFirstLetter(winningColor);if(numberElement)numberElement.textContent=winningNumber;if(sizeElement)sizeElement.textContent=capitalizeFirstLetter(winningBigSmall);}resultContainer.style.display='flex';const timeout=hasWin?5000:3000;resultDisplayTimeout=setTimeout(()=>{resultContainer.style.display='none'},timeout)}catch(error){console.error("Error showing win/loss result:",error)}}function capitalizeFirstLetter(string){return string.charAt(0).toUpperCase()+string.slice(1)}function setupHistoryTabs(){try{const gameTabs=document.querySelectorAll('.gh-tab');if(!gameTabs||gameTabs.length<3){console.warn("History tabs not found");return}gameTabs[0].addEventListener('click',()=>{switchHistoryTab('game')});gameTabs[2].addEventListener('click',()=>{switchHistoryTab('user')})}catch(error){console.error("Error setting up history tabs:",error)}}function switchHistoryTab(tabName){try{if(tabName===currentHistoryTab){updateGameHistoryDisplay();return}const historyTable=document.querySelector('.gh-table');const userHistoryContainer=document.getElementById('userHistoryContainer');const gameTabs=document.querySelectorAll('.gh-tab');if(!historyTable||!userHistoryContainer||!gameTabs||gameTabs.length<3){console.warn("History elements not found");return}if(tabName==='game'){gameTabs[0].classList.add('active');gameTabs[2].classList.remove('active');historyTable.style.display='';userHistoryContainer.style.display='none';updateGameHistoryDisplay()}else if(tabName==='user'){gameTabs[0].classList.remove('active');gameTabs[2].classList.add('active');historyTable.style.display='none';userHistoryContainer.style.display='block';if(!currentUser){userHistoryContainer.innerHTML=` <div class="empty-history-message"> Please login to view your betting history</div>`;showToast("Login required to view your history",!1);return}loadUserBettingHistory()}currentHistoryTab=tabName}catch(error){console.error("Error switching history tab:",error)}}async function loadUserBettingHistory(){try{if(!currentUser)return;const userHistoryContainer=document.getElementById('userHistoryContainer');if(!userHistoryContainer){console.warn("User history container not found");return}userHistoryContainer.innerHTML=`<div style="text-align: center; padding: 20px;"><div>Loading your betting history...</div> </div>`;const periodsRef=ref(db,'PERIOD_COUNT/history');const periodsQuery=query(periodsRef,limitToLast(50));onValue(periodsQuery,async(periodsSnapshot)=>{if(!periodsSnapshot.exists()){userHistoryContainer.innerHTML=`<div class="empty-history-message"> No betting history found</div>`;return}const periods=periodsSnapshot.val();let periodPromises=[];let updatedUserHistory=[];for(const periodKey in periods){const periodData=periods[periodKey];const periodNumber=periodData.period_number;const promise=get(ref(db,`CurrentGameBets/${periodNumber}/${currentUser.uid}`)).then(snapshot=>{if(snapshot.exists()){const userBets=snapshot.val();for(const betId in userBets){const bet=userBets[betId];if(bet.bet_status==='win'||bet.bet_status==='lose'){updatedUserHistory.push({period:periodNumber,betType:bet.bet_type,selectedValue:bet.user_selected_value,amount:bet.user_total_amount,winAmount:bet.win_amount||0,isWin:bet.bet_status==='win',resultNumber:bet.result_number,resultColor:bet.result_color,resultBigSmall:bet.result_bigSmall})}}}}).catch(error=>{console.error(`Error getting bets for period ${periodNumber}:`,error)});periodPromises.push(promise)}await Promise.all(periodPromises);updatedUserHistory.sort((a,b)=>parseInt(b.period)-parseInt(a.period));userHistoryData=updatedUserHistory;displayUserHistory(updatedUserHistory);historyTabInitialized=!0},(error)=>{console.error("Error in real-time betting history listener:",error);userHistoryContainer.innerHTML=`<div class="empty-history-message">Error loading your betting history</div>`})}catch(error){console.error("Error loading user betting history:",error)}}function displayUserHistory(history){try{const userHistoryContainer=document.getElementById('userHistoryContainer');if(!userHistoryContainer)return;userHistoryContainer.innerHTML='';if(history.length===0){userHistoryContainer.innerHTML=`<div class="empty-history-message"> No betting history found</div> `;return}for(let i=0;i<history.length;i++){const item=history[i];const isLatest=i===0;const historyItem=document.createElement('div');historyItem.className=`user-history-row user-history-${item.isWin ? 'win' : 'lose'}`;let betTypeLabel='';let selectedValueDisplay='';if(item.betType==='number'){betTypeLabel='Number';selectedValueDisplay=item.selectedValue}else if(item.betType==='color'){betTypeLabel='Color';selectedValueDisplay=capitalizeFirstLetter(item.selectedValue)}else if(item.betType==='bigSmall'){betTypeLabel='Size';selectedValueDisplay=capitalizeFirstLetter(item.selectedValue)}const latestBadge=isLatest?`<div class="latest-result-badge">Latest</div>`:'';historyItem.innerHTML=` ${latestBadge}<div class="user-history-details"><div class="user-history-period">Period: ${item.period}</div><div class="user-history-bet-type">Bet: ${betTypeLabel}</div><div class="user-history-result"><div class="user-history-value">${selectedValueDisplay}</div><div class="user-history-amount">${item.isWin ? '+' : '-'}₹${formatIndianNumber(item.isWin ? item.winAmount : item.amount)}</div></div></div>`;userHistoryContainer.appendChild(historyItem)}}catch(error){console.error("Error displaying user history:",error)}}function setupHistoryPagination(){try{const nextBtn=document.querySelector('.gh-page-btn.next');if(nextBtn){nextBtn.addEventListener('click',nextHistoryPage)}const prevBtn=document.querySelector('.gh-page-btn.prev');if(prevBtn){prevBtn.addEventListener('click',prevHistoryPage)}}catch(error){console.error("Error setting up history pagination:",error)}}function nextHistoryPage(){try{if(currentHistoryPage<totalHistoryPages){currentHistoryPage++;displayHistoryPage(currentHistoryPage)}}catch(error){console.error("Error going to next history page:",error)}}function prevHistoryPage(){try{if(currentHistoryPage>1){currentHistoryPage--;displayHistoryPage(currentHistoryPage)}}catch(error){console.error("Error going to previous history page:",error)}}function displayHistoryPage(page){try{const historyContainer=document.querySelector('.gh-table');if(!historyContainer){console.warn("History container not found");return}const headerElement=historyContainer.querySelector('.gh-table-header');if(!headerElement){console.warn("History header not found");return}const pageSize=9;const startIdx=(page-1)*pageSize;const endIdx=page*pageSize;const pageItems=cachedHistoryData.slice(startIdx,endIdx);const existingRows=historyContainer.querySelectorAll('.gh-row');existingRows.forEach(row=>row.remove());const fragment=document.createDocumentFragment();pageItems.forEach((period,index)=>{const rowElement=document.createElement('div');rowElement.className='gh-row';const isLatest=page===1&&index===0;const latestBadge=isLatest?`<div class="latest-result-badge">Latest</div>`:'';const colorData=numberColors[period.win_number];let colorDots='';if(colorData&&colorData.colors){colorData.colors.forEach(color=>{const colorClass=(color.trim()==='violet')?'purple':color.trim();colorDots+=`<span class="gh-dot gh-dot-${colorClass}"></span>`})}rowElement.innerHTML=` ${latestBadge}<div class="gh-cell gh-period">${period.period_number}</div><div class="gh-cell gh-number"><span class="gh-num-value gh-num-${period.win_number}">${period.win_number}</span></div><div class="gh-cell gh-size">${capitalizeFirstLetter(period.win_bigSmall)}</div><div class="gh-cell gh-color"><div class="gh-dots">${colorDots}</div></div>`;fragment.appendChild(rowElement)});const insertPoint=headerElement.nextSibling;historyContainer.insertBefore(fragment,insertPoint);const paginationInfo=document.querySelector('.gh-page-info');if(paginationInfo){paginationInfo.textContent=`${page}/${totalHistoryPages}`}}catch(error){console.error("Error displaying history page:",error)}}function updateGameHistoryDisplay(){try{if(currentHistoryTab==='user'){return}if(cachedHistoryData.length>0){displayHistoryPage(currentHistoryPage);refreshHistoryCache();return}loadHistoryFromDatabase()}catch(error){console.error("Error updating game history display:",error)}}function loadHistoryFromDatabase(){try{const historyRef=ref(db,'PERIOD_COUNT/history');get(historyRef).then((snapshot)=>{if(snapshot.exists()){const historyData=snapshot.val();processFreshHistoryData(historyData)}else{loadHistoryFromLocalStorage()}}).catch(error=>{console.error("Error fetching history data:",error);loadHistoryFromLocalStorage()})}catch(error){console.error("Error loading history from database:",error);loadHistoryFromLocalStorage()}}function processFreshHistoryData(historyData){try{const periods=Object.values(historyData);periods.sort((a,b)=>parseInt(b.period_number)-parseInt(a.period_number));cachedHistoryData=periods;localStorage.setItem('wingo_game_history',JSON.stringify(periods.slice(0,100)));totalHistoryPages=Math.ceil(periods.length/10)||1;currentHistoryPage=1;displayHistoryPage(1)}catch(error){console.error("Error processing fresh history data:",error)}}function refreshHistoryCache(){setTimeout(()=>{const historyRef=ref(db,'PERIOD_COUNT/history');get(historyRef).then((snapshot)=>{if(snapshot.exists()){const historyData=snapshot.val();const periods=Object.values(historyData);periods.sort((a,b)=>parseInt(b.period_number)-parseInt(a.period_number));cachedHistoryData=periods;localStorage.setItem('wingo_game_history',JSON.stringify(periods.slice(0,100)));totalHistoryPages=Math.ceil(periods.length/10)||1}}).catch(error=>{console.error("Error refreshing history cache:",error)})},100)}function loadHistoryFromLocalStorage(){try{const localHistoryString=localStorage.getItem('wingo_game_history');if(localHistoryString){try{const localHistory=JSON.parse(localHistoryString);if(Array.isArray(localHistory)&&localHistory.length>0){localHistory.sort((a,b)=>parseInt(b.period_number)-parseInt(a.period_number));cachedHistoryData=localHistory;totalHistoryPages=Math.ceil(localHistory.length/10)||1;currentHistoryPage=1;displayHistoryPage(1)}else{}}catch(e){console.error("Error parsing history from localStorage:",e)}}else{}}catch(error){console.error("Error loading history from localStorage:",error)}}function refreshBalance(){if(currentUser){loadUserBalance();showToast("Balance refreshed")}else{showToast("Please login to view balance",!1)}}document.addEventListener('DOMContentLoaded',initializeGame);async function checkAdminOverride(){try{const adminOverrideRef=ref(db,`adminOverride/${currentGamePeriod}`);const snapshot=await get(adminOverrideRef);if(snapshot.exists()){return snapshot.val()}else{return null}}catch(error){console.error('Error checking admin override:',error);return null}}window.setupBetOnElement=setupBetOnElement;window.setOnBetElement=setOnBetElement;window.placeBet=placeBet;window.generateGameResult=generateGameResult;window.start_overlay=start_overlay;window.initializeGame=initializeGame;window.formatIndianNumber=formatIndianNumber;window.refreshBalance=refreshBalance;window.showWinLossResult=showWinLossResult;window.nextHistoryPage=nextHistoryPage;window.prevHistoryPage=prevHistoryPage;window.switchHistoryTab=switchHistoryTab;window.checkAdminOverride=checkAdminOverride